{"version":3,"sources":["tabard.js"],"names":[],"mappingsfile":"wow.js","sourcesContent":["$(document).ready(function() {\n\n    $.ajax({\n        url : '/tabard',\n        method : 'GET',\n        success : function(resp) {\n            var tabard = new GuildTabard(JSON.parse(resp));\n        },\n        error : function(err) {\n            console.log(err);\n        }\n    });\n\n    function GuildTabard(guildMeta) {\n\n        var canvas = document.getElementById('guild-tabard');\n        var context = canvas.getContext('2d');\n\n        var self = this,\n            _width = canvas.width,\n            _height = canvas.height,\n            _src = [\n                '/images/ring.png',\n                '/images/shadow.png',\n                '/images/background.png',\n                '/images/overlay.png',\n                '/images/border.png',\n                '/images/emblem.png',\n                '/images/hooks.png'\n            ],\n\n            // Colors that need to be applied to each layer\n            _color = [\n                null,\n                null,\n                guildMeta['background_color_data'],\n                null,\n                guildMeta['border_color_data'],\n                guildMeta['icon_color_data'],\n                null\n            ],\n\n            // Positions to overlay each image at\n            _position = [\n                [ 0, 0, (_width*216/240), (_width*216/240) ],\n                [ (_width*18/240), (_width*27/240), (_width*179/240), (_width*216/240) ],\n                [ (_width*18/240), (_width*27/240), (_width*179/240), (_width*210/240) ],\n                [ (_width*18/240), (_width*27/240), (_width*179/240), (_width*210/240) ],\n                [ (_width*31/240), (_width*40/240), (_width*147/240), (_width*159/240) ],\n                [ (_width*33/240), (_width*57/240), (_width*125/240), (_width*125/240) ],\n                [ (_width*18/240), (_width*27/240), (_width*179/240), (_width*32/240) ]\n            ],\n            _img = [ new Image(), new Image(), new Image(), new Image(), new Image(), new Image(), new Image() ];\n            $(canvas).css('opacity', 0);\n        ;\n\n        self.drawImage = function() {\n\n            // Draw onto canvas\n            _img[0].src = _src[0];\n            context.drawImage(_img[0], _position[0][0], _position[0][1], _position[0][2], _position[0][3]);\n\n            $(canvas).animate({opacity: 1}, 400);\n        };\n\n        function _render(index) {\n            var _oldCanvas = new Image(),\n                _newCanvas = new Image();\n\n            // Load in contents behind new layer\n            _img[index].src = _src[index];\n\n            _img[index].onload = function() {\n                _oldCanvas.src = canvas.toDataURL('image/png');\n            };\n\n            _oldCanvas.onload = function() {\n                canvas.width = 1;\n                canvas.width = _width;\n                context.drawImage(_img[index], _position[index][0], _position[index][1], _position[index][2], _position[index][3]);\n\n                if (typeof _color[index] !== 'undefined' && _color[index] !== null) {\n                    _colorize(_color[index][0], _color[index][1], _color[index][2]);\n                }\n\n                _newCanvas.src = canvas.toDataURL('image/png');\n                context.drawImage(_oldCanvas, 0, 0, _width, _height);\n            };\n\n            _newCanvas.onload = function() {\n                context.drawImage(_newCanvas, 0, 0, _width, _height);\n                index++;\n\n                if (index < _src.length) {\n                    _render(index);\n                } else {\n                    $(canvas).animate({opacity: 1}, 400);\n                }\n            };\n        };\n\n        function _colorize(r, g, b) {\n            var imageData = context.getImageData(0, 0, _width, _height),\n                pixelData = imageData.data,\n                i = pixelData.length,\n                intensityScale = 19,\n                blend = 1 / 3,\n                added_r = r / intensityScale + r * blend,\n                added_g = g / intensityScale + g * blend,\n                added_b = b / intensityScale + b * blend,\n                scale_r = r / 255 + blend,\n                scale_g = g / 255 + blend,\n                scale_b = b / 255 + blend;\n\n            do {\n                if (pixelData[i + 3] !== 0) {\n                    pixelData[i] = pixelData[i] * scale_r + added_r;\n                    pixelData[i + 1] = pixelData[i + 1] * scale_g + added_g;\n                    pixelData[i + 2] = pixelData[i + 2] * scale_b + added_b;\n                }\n            } while (i -= 4);\n            context.putImageData(imageData, 0, 0);\n        };\n\n        _render(0);\n    };\n});\n"]}